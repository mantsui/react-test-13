{"version":3,"sources":["LineDropdown.js","RadioButton.js","ConfigDialog.js","index.js"],"names":["makeOption","item","index","react_default","a","createElement","disabled","separator","key","value","LineDropdown","strInput","listData","this","props","title","Fragment","tableau_ui_min","kind","defaultValue","map","Component","RadioButton","state","checkedValue","onChange","e","_this","setState","target","_this2","radioData","radioTitle","radioOption","i","checked","name","tableau","window","radioList","sheetList02","measureColumns","dimensionColumns","ConfigDialog","initializeSheetFilter","src_LineDropdown","sheetList","src_RadioButton","selectedTabIndex","extensions","initializeDialogAsync","then","console","log","tableauSettings","settings","getAll","tableauDashboard","dashboardContent","dashboard","worksheets","forEach","worksheet","push","getSummaryDataAsync","maxRows","sumdata","columns","current_value","dataType","fieldName","err","length","options","formatting","panels","configuration","activation","alignment","onTabChange","concat","tabs","content","React","ReactDOM","render","src_ConfigDialog","document","getElementById"],"mappings":"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","file":"static/js/main.72485c68.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { DropdownSelect } from '@tableau/tableau-ui'\r\n\r\n\r\nconst strDefault = 'None selected';\r\n\r\nconst makeDefaultOption = (strInput, index) =>\r\n    <option value=\"DEFAULT\" disabled>{strInput}</option>\r\n\r\nconst makeOption = (item, index) => \r\n    <option disabled={item.disabled || item.separator} key={index} value={item.value}>{item.value}</option>;\r\n\r\n\r\nclass LineDropdown extends Component {\r\n\r\n    render() {\r\n        const { listData } = this.props;\r\n        const { title } = this.props;\r\n\r\n        return(\r\n            <>\r\n            <span>{title}</span>\r\n            <br/>            \r\n            <DropdownSelect kind='line' defaultValue={'DEFAULT'}>\r\n                    {makeDefaultOption(strDefault)}\r\n                    {listData.map(makeOption)}\r\n            </DropdownSelect>\r\n            <br/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LineDropdown","import React, { Component } from 'react';\r\nimport { Radio } from '@tableau/tableau-ui'\r\n\r\n\r\nclass RadioButton extends Component {\r\n    state = { checkedValue: 'one' };\r\n    onChange = (e) => this.setState({checkedValue: e.target.value});\r\n\r\n    render () {\r\n        const { radioData } = this.props;\r\n        const { radioTitle } = this.props;\r\n\r\n        return(\r\n            <>\r\n            <span>{radioTitle}</span>\r\n            <br/>\r\n            {radioData.map( (radioOption, i) =>\r\n                <React.Fragment key={i}>\r\n                <Radio \r\n                    checked={this.state.checkedValue === radioOption} \r\n                    onChange={this.onChange} \r\n                    name='ordinal' \r\n                    value={radioOption}>\r\n                    {radioOption}\r\n                </Radio>\r\n                <br/>\r\n                </React.Fragment> \r\n            )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RadioButton\r\n\r\n/*\r\nclass RadioButton extends Component {\r\n    state = { checkedValue: 'one' };\r\n    onChange = (e) => this.setState({checkedValue: e.target.value});\r\n\r\n    render () {\r\n        return(\r\n            <>\r\n            <Radio checked={this.state.checkedValue === 'one'} onChange={this.onChange} name='ordinal' value='one'>One</Radio><br/>\r\n            <Radio checked={this.state.checkedValue === 'two'} onChange={this.onChange} name='ordinal' value='two'>Two</Radio><br/>\r\n            <Radio checked={this.state.checkedValue === 'three'} onChange={this.onChange} name='ordinal' value='three'>Three</Radio><br/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n*/\r\n","import React from 'react';\r\nimport LineDropdown from './LineDropdown.js'\r\nimport RadioButton from './RadioButton.js'\r\nimport { Tabs } from '@tableau/tableau-ui'\r\n\r\nconst { tableau } = window;\r\n\r\nlet radioList = ['Yes', 'No'];\r\n\r\nlet list01 = [\r\n    { value: 'alpha'},\r\n    { value: 'bravo'},\r\n    { value: 'charlie'},\r\n    { value: 'delta'},\r\n    { value: 'zebra'}\r\n];\r\n\r\nlet sheetList02 = [];\r\nlet measureColumns = [];\r\nlet dimensionColumns = [];\r\nlet configuration =<></>;\r\n\r\n\r\nclass ConfigDialog extends React.Component {\r\n\r\n\r\n    /*state = { \r\n        sheetList: ['abc'],\r\n        configuration: <></>\r\n    };*/\r\n\r\n    initializeSheetFilter = () => {\r\n    //initializeSheetFilter() {    \r\n        configuration = <>\r\n            <LineDropdown listData={this.sheetList} title='Please select worksheet' /><br/><br/>\r\n            <RadioButton radioData={radioList} radioTitle='Dollar Sign?'/>\r\n            </>\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState({ selectedTabIndex: 0 });\r\n\r\n        try{\r\n            tableau.extensions.initializeDialogAsync().then(() => {\r\n                console.log('Debug: component will mount.');\r\n                const tableauSettings = tableau.extensions.settings.getAll();\r\n                const tableauDashboard = tableau.extensions.dashboardContent.dashboard;\r\n\r\n                tableauDashboard.worksheets.forEach(function (worksheet) {\r\n                    sheetList02.push(worksheet.name);\r\n\r\n                    worksheet.getSummaryDataAsync({ maxRows: 1 }).then(function (sumdata) {\r\n                        console.log('Debug running worksheet.getSummaryDataAsync... ');\r\n\r\n                        sumdata.columns.forEach(function (current_value) {\r\n\r\n                            if(current_value.dataType === 'float' || current_value.dataType === 'int') {\r\n                                measureColumns.push(current_value.fieldName);\r\n                            }\r\n                    \r\n                            if(current_value.dataType === 'string') {\r\n                                dimensionColumns.push(current_value.fieldName);\r\n                            }\r\n                    \r\n                        });\r\n                    });\r\n                });\r\n\r\n                console.log('Debug tableauSettings: ', tableauSettings);\r\n                console.log('Debug sheetList02: ', sheetList02);\r\n                console.log('Debug tableauDashboard: ', tableauDashboard);\r\n                console.log('Debug measureColumns: ', measureColumns);\r\n                console.log('Debug dimensionColumns: ', dimensionColumns);\r\n            });\r\n        }\r\n        catch(err){\r\n            console.log('window.tableau.extensions did not load');\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('Debug: component did mount');\r\n\r\n        let TempList = [\"Tab Superstore Data\", \"Tabulated Data US Census\"];\r\n\r\n        if (sheetList02.length < 1) {\r\n            console.log('Condition if met');\r\n            sheetList02 = TempList;\r\n            console.log('sheetList02: ', sheetList02);\r\n        }\r\n\r\n        console.log('sheetList: ', sheetList02);\r\n        //this.initializeSheetFilter();\r\n    }\r\n\r\n    getWorksheetList(){\r\n        console.log('Running getWorksheetList function.');\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n        /*const configuration = <>\r\n            <LineDropdown listData={this.sheetList} title='Please select worksheet' /><br/><br/>\r\n            <RadioButton radioData={radioList} radioTitle='Dollar Sign?'/>\r\n            </>;*/\r\n\r\n        const options = <>\r\n            <span>Test options</span><br/>\r\n            <span>Test options2</span>\r\n            </>;\r\n        const formatting = <>\r\n            <span>Test formatting</span><br/>\r\n            <span>Test formatting2</span>\r\n            </>;\r\n        const panels = [this.configuration, options, formatting];\r\n\r\n        const tabs = [ { content: 'Extension Config' }, { content: 'Optional Features' }, { content: 'Source / Attribution' } ];\r\n\r\n        return(\r\n            <>\r\n            <h1>Tableau Extension D3 Sankey Diagram ConfigDialog.</h1>\r\n\r\n            <br/>\r\n            <Tabs\r\n            activation='manual'\r\n            alignment='left'\r\n            onTabChange={(index) => {\r\n                console.log(`onChange: ${index}`);\r\n                this.setState({ selectedTabIndex: index });\r\n            }}\r\n            selectedTabIndex={this.state.selectedTabIndex}\r\n            tabs={tabs}\r\n            >\r\n\r\n            {/*<span>{tabs[this.state.selectedTabIndex].content} panel content</span>*/}\r\n            {panels[this.state.selectedTabIndex]}\r\n            </Tabs>\r\n\r\n            <br/>\r\n\r\n            {/*<LineDropdown listData={list01} title='Please select worksheet' />\r\n            <br/>\r\n            <br/>\r\n            <RadioButton radioData={radioList} radioTitle='Dollar Sign?'/>*/}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConfigDialog\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport './style.css';\n//import * as serviceWorker from './serviceWorker';\nimport ConfigDialog from './ConfigDialog.js';\n\nReactDOM.render(\n    <ConfigDialog />, \n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n//serviceWorker.register();\n\n\n"],"sourceRoot":""}