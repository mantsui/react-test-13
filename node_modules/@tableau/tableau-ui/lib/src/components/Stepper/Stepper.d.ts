import * as React from 'react';
import { DivAttrs } from '../../utils/NativeProps';
export interface StepperProps extends DivAttrs {
    /** NOTE: applied to the root `<div>`, not the `<input>`. */
    className?: string;
    /** The disabled state of the component. */
    disabled?: boolean;
    /**
     * When true, allow floating-point input.
     *
     * Due to the lossiness inherent in floating-point math, in most cases it will be advisable to format any
     * number passed back into the `value` prop to a certain number of rounded digits. Failure to do so may yield an unpleasant user
     * experience and/or unpredictable results when incrementing/decrementing.
     *
     * See also: https://stackoverflow.com/questions/1458633/how-to-deal-with-floating-point-number-precision-in-javascript.
     */
    floatingPoint?: boolean;
    /** Ref to the rendered `<input>`. */
    inputRef?: React.Ref<HTMLInputElement>;
    /** The minimum value allowed after user input. */
    min?: number;
    /** The maximum value allowed after user input. */
    max?: number;
    /**
     * Invoked when the user input is parsable as a different numeric value than the one passed in `value` and:
     *
     * * a Blur event occurs, or
     * * the user clicks the increment/decrement buttons, or
     * * the parsed user input differs from `value` and the user presses any of the following keys:
     * Home, End, Page Up, Page Down, Arrow Up, Arrow Down, Enter, Escape
     *
     * NOTE: As this is a fully-controlled component, `value` should be passed back into the props to reflect the change.
     */
    onValueChange?: (value: number) => void;
    /** The multiple of `step` to increment/decrement by when pressing Page Up/Page Down. */
    pageSteps?: number;
    /** Specifies the "snapping" granularity when incrementing/decrementing. */
    step?: number;
    /** The current value. */
    value: number;
}
export interface StepperState {
    inputText: string;
}
/**
 * A component which renders an `<input>` which accepts (only) numerical text, and which provides buttons and keyboard behavior for
 * incrementing and decrementing the most-recently-parsed value.
 *
 * This is a partially-controlled component. When the user-inputted text is not currently parsable, the displayed value of the `<input>`
 * is managed internally. Once the text is parsable as a Number, `onValueChange` will be invoked with the number parsed from the user
 * input. Please reference the `onValueChange` prop for more information.
 *
 * While this component is primarily designed to be used with integers, it may also be used with floating-point numbers by enabling the
 * `floatingPoint` prop. Please reference that prop for important formatting considerations.
 *
 * Documented props will be used by this component. All other provided props will be passed to the root `<div>` element.
 */
export declare class Stepper extends React.Component<StepperProps, StepperState> {
    private inputElement;
    static defaultProps: Partial<StepperProps>;
    state: StepperState;
    componentDidUpdate(prevProps: StepperProps): void;
    private handleButtonsFocus;
    private handleInputBlur;
    private handleInputChange;
    private handleKeyDown;
    private handleDivRef;
    private pageDown;
    private pageUp;
    private revert;
    private stepDown;
    private stepUp;
    private triggerChange;
    render(): JSX.Element;
    private renderButton;
}
